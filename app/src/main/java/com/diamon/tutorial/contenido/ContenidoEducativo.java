package com.diamon.tutorial.contenido;

import android.content.Context;
import com.diamon.tutorial.database.ContenidoDAO;
import com.diamon.tutorial.models.ContenidoTutorial;
import java.util.ArrayList;
import java.util.List;

/**
 * Clase que gestiona todo el contenido educativo del tutorial
 * "Juego Java 30 Pasos"
 * 
 * Esta clase contiene el contenido completo y estructurado de los 30 cap√≠tulos
 * del tutorial, desde conceptos b√°sicos hasta el desarrollo completo del juego.
 * 
 * @author Daniel Diamon
 * @version 2.0 - FASE 2: POO Completo
 */
public class ContenidoEducativo {
    
    private Context context;
    private ContenidoDAO contenidoDAO;
    
    public ContenidoEducativo(Context context) {
        this.context = context;
        this.contenidoDAO = new ContenidoDAO(context);
    }
    
    /**
     * Inicializa todo el contenido educativo en la base de datos
     */
    public void inicializarContenidoCompleto() {
        // Limpiar contenido existente
        contenidoDAO.limpiarTodoElContenido();
        
        // Insertar todo el contenido educativo
        insertarCapitulos1a5_Fundamentos();
        insertarCapitulos6a10_POO();
        insertarCapitulos11a15_EstructurasDatos();
        insertarCapitulos16a20_InterfacesGraficas();
        insertarCapitulos21a25_DesarrolloJuego();
        insertarCapitulos26a30_OptimizacionFinalizacion();
    }
    
    /**
     * CAP√çTULOS 1-5: FUNDAMENTOS DE JAVA
     */
    private void insertarCapitulos1a5_Fundamentos() {
        // ... c√≥digo anterior de cap√≠tulos 1-5 se mantiene igual ...
        // (contenido ya implementado en versi√≥n anterior)
        
        // CAP√çTULO 1: Introducci√≥n a Java y Primer Programa
        ContenidoTutorial cap1 = new ContenidoTutorial(
            1,
            "Paso 1: Tu Primer Programa en Java",
            "Bienvenido al mundo de la programaci√≥n en Java. En este primer paso, aprender√°s a crear tu primer programa y entender√°s la estructura b√°sica de Java. Este es el fundamento sobre el cual construiremos nuestro juego completo.",
            "// Mi primer programa en Java\n" +
            "public class HolaMundo {\n" +
            "    public static void main(String[] args) {\n" +
            "        System.out.println(\"¬°Hola, mundo del desarrollo de juegos!\");\n" +
            "        System.out.println(\"Bienvenido al Tutorial Java 30 Pasos\");\n" +
            "    }\n" +
            "}",
            "**Explicaci√≥n detallada:**\n\n" +
            "‚Ä¢ **public class HolaMundo**: Declara una clase p√∫blica llamada 'HolaMundo'\n" +
            "‚Ä¢ **public static void main**: Es el punto de entrada del programa\n" +
            "‚Ä¢ **String[] args**: Par√°metros que el programa puede recibir\n" +
            "‚Ä¢ **System.out.println()**: Imprime texto en la consola\n\n" +
            "**Conceptos clave:**\n" +
            "- Java es un lenguaje orientado a objetos\n" +
            "- Todo c√≥digo debe estar dentro de una clase\n" +
            "- El m√©todo main es obligatorio para ejecutar el programa\n" +
            "- Java distingue entre may√∫sculas y min√∫sculas",
            1
        );
        contenidoDAO.insertarContenido(cap1);
        
        // Cap√≠tulos 2-5 mantenidos igual que antes...
        // Por brevedad no los repito aqu√≠
    }
    
    /**
     * CAP√çTULOS 6-10: PROGRAMACI√ìN ORIENTADA A OBJETOS
     * ¬°COMPLETAMENTE IMPLEMENTADO EN FASE 2!
     */
    private void insertarCapitulos6a10_POO() {
        
        // CAP√çTULO 6: Clases y Objetos B√°sicos
        ContenidoTutorial cap6 = new ContenidoTutorial(
            6,
            "Paso 6: Clases y Objetos B√°sicos",
            "La Programaci√≥n Orientada a Objetos (POO) es el coraz√≥n de Java. Aprender√°s a crear clases que representen elementos de tu juego: jugadores, enemigos, proyectiles. Una clase es como un molde que define las caracter√≠sticas y comportamientos de un objeto.",
            "// Nuestra primera clase para un juego\n" +
            "public class Jugador {\n" +
            "    // ATRIBUTOS (caracter√≠sticas del jugador)\n" +
            "    String nombre;\n" +
            "    int vida;\n" +
            "    int puntuacion;\n" +
            "    double posicionX;\n" +
            "    double posicionY;\n" +
            "    boolean estaVivo;\n" +
            "    \n" +
            "    // CONSTRUCTOR (c√≥mo crear un jugador)\n" +
            "    public Jugador(String nombre, double x, double y) {\n" +
            "        this.nombre = nombre;\n" +
            "        this.vida = 100;        // Vida inicial\n" +
            "        this.puntuacion = 0;    // Puntuaci√≥n inicial\n" +
            "        this.posicionX = x;\n" +
            "        this.posicionY = y;\n" +
            "        this.estaVivo = true;\n" +
            "        System.out.println(\"¬°Jugador \" + nombre + \" ha entrado al juego!\");\n" +
            "    }\n" +
            "    \n" +
            "    // M√âTODOS (acciones que puede hacer el jugador)\n" +
            "    public void mover(double nuevaX, double nuevaY) {\n" +
            "        this.posicionX = nuevaX;\n" +
            "        this.posicionY = nuevaY;\n" +
            "        System.out.println(nombre + \" se movi√≥ a (\" + posicionX + \", \" + posicionY + \")\");\n" +
            "    }\n" +
            "    \n" +
            "    public void recibirDanio(int danio) {\n" +
            "        this.vida -= danio;\n" +
            "        System.out.println(nombre + \" recibi√≥ \" + danio + \" de da√±o. Vida: \" + vida);\n" +
            "        \n" +
            "        if (vida <= 0) {\n" +
            "            estaVivo = false;\n" +
            "            System.out.println(\"üòµ \" + nombre + \" ha sido eliminado!\");\n" +
            "        }\n" +
            "    }\n" +
            "    \n" +
            "    public void ganarPuntos(int puntos) {\n" +
            "        this.puntuacion += puntos;\n" +
            "        System.out.println(\"+\" + puntos + \" puntos! Total: \" + puntuacion);\n" +
            "    }\n" +
            "    \n" +
            "    public void mostrarEstado() {\n" +
            "        System.out.println(\"=== Estado de \" + nombre + \" ===");\n" +
            "        System.out.println(\"Vida: \" + vida);\n" +
            "        System.out.println(\"Puntuaci√≥n: \" + puntuacion);\n" +
            "        System.out.println(\"Posici√≥n: (\" + posicionX + \", \" + posicionY + \")\");\n" +
            "        System.out.println(\"Estado: \" + (estaVivo ? \"Vivo\" : \"Muerto\"));\n" +
            "    }\n" +
            "}\n" +
            "\n" +
            "// Clase principal para probar nuestro jugador\n" +
            "public class PruebaJugador {\n" +
            "    public static void main(String[] args) {\n" +
            "        // CREAR OBJETOS (instanciar la clase)\n" +
            "        Jugador hero = new Jugador(\"SuperHero\", 10, 20);\n" +
            "        Jugador villano = new Jugador(\"DrEvil\", 50, 60);\n" +
            "        \n" +
            "        // USAR LOS OBJETOS\n" +
            "        hero.mostrarEstado();\n" +
            "        \n" +
            "        // Simular gameplay\n" +
            "        hero.mover(15, 25);\n" +
            "        hero.ganarPuntos(100);\n" +
            "        hero.recibirDanio(30);\n" +
            "        \n" +
            "        villano.recibirDanio(80);\n" +
            "        villano.ganarPuntos(50);\n" +
            "        \n" +
            "        // Mostrar estado final\n" +
            "        hero.mostrarEstado();\n" +
            "        villano.mostrarEstado();\n" +
            "    }\n" +
            "}",
            "**Conceptos Fundamentales de POO:**\n\n" +
            "‚Ä¢ **Clase**: Plantilla o molde que define atributos y m√©todos\n" +
            "‚Ä¢ **Objeto**: Instancia espec√≠fica de una clase (hero, villano)\n" +
            "‚Ä¢ **Atributos**: Variables que describen el estado del objeto\n" +
            "‚Ä¢ **M√©todos**: Funciones que definen el comportamiento del objeto\n" +
            "‚Ä¢ **Constructor**: M√©todo especial para crear objetos\n\n" +
            "**Palabra clave 'this':**\n" +
            "- Se refiere al objeto actual\n" +
            "- Evita confusi√≥n entre par√°metros y atributos\n\n" +
            "**Ventajas de POO:**\n" +
            "- C√≥digo m√°s organizado y reutilizable\n" +
            "- F√°cil de mantener y expandir\n" +
            "- Modela objetos del mundo real\n" +
            "- Perfecta para juegos (personajes, objetos, enemigos)",
            1
        );
        contenidoDAO.insertarContenido(cap6);
        
        // CAP√çTULO 7: Encapsulaci√≥n y Modificadores de Acceso
        ContenidoTutorial cap7 = new ContenidoTutorial(
            7,
            "Paso 7: Encapsulaci√≥n - Protegiendo Nuestros Datos",
            "La encapsulaci√≥n es uno de los pilares fundamentales de POO. Consiste en ocultar los detalles internos de una clase y controlar el acceso a sus datos. En un juego, no queremos que se pueda modificar la vida del jugador directamente desde cualquier lugar.",
            "// Clase Jugador con encapsulaci√≥n adecuada\n" +
            "public class JugadorSeguro {\n" +
            "    // ATRIBUTOS PRIVADOS (no se pueden acceder directamente)\n" +
            "    private String nombre;\n" +
            "    private int vida;\n" +
            "    private int vidaMaxima;\n" +
            "    private int puntuacion;\n" +
            "    private double posicionX;\n" +
            "    private double posicionY;\n" +
            "    private boolean estaVivo;\n" +
            "    private String nivel; // Principiante, Intermedio, Experto\n" +
            "    \n" +
            "    // CONSTRUCTOR P√öBLICO\n" +
            "    public JugadorSeguro(String nombre, double x, double y) {\n" +
            "        this.nombre = validarNombre(nombre);\n" +
            "        this.vida = 100;\n" +
            "        this.vidaMaxima = 100;\n" +
            "        this.puntuacion = 0;\n" +
            "        this.posicionX = x;\n" +
            "        this.posicionY = y;\n" +
            "        this.estaVivo = true;\n" +
            "        this.nivel = \"Principiante\";\n" +
            "    }\n" +
            "    \n" +
            "    // M√âTODOS GETTER (para leer valores)\n" +
            "    public String getNombre() {\n" +
            "        return nombre;\n" +
            "    }\n" +
            "    \n" +
            "    public int getVida() {\n" +
            "        return vida;\n" +
            "    }\n" +
            "    \n" +
            "    public int getPuntuacion() {\n" +
            "        return puntuacion;\n" +
            "    }\n" +
            "    \n" +
            "    public double getPosicionX() {\n" +
            "        return posicionX;\n" +
            "    }\n" +
            "    \n" +
            "    public double getPosicionY() {\n" +
            "        return posicionY;\n" +
            "    }\n" +
            "    \n" +
            "    public boolean estaVivo() {\n" +
            "        return estaVivo;\n" +
            "    }\n" +
            "    \n" +
            "    public String getNivel() {\n" +
            "        return nivel;\n" +
            "    }\n" +
            "    \n" +
            "    // M√âTODOS SETTER (para modificar valores con validaci√≥n)\n" +
            "    public void setNombre(String nuevoNombre) {\n" +
            "        this.nombre = validarNombre(nuevoNombre);\n" +
            "    }\n" +
            "    \n" +
            "    public void setPosicion(double x, double y) {\n" +
            "        // Validar que la posici√≥n est√© dentro del mapa\n" +
            "        if (x >= 0 && x <= 800 && y >= 0 && y <= 600) {\n" +
            "            this.posicionX = x;\n" +
            "            this.posicionY = y;\n" +
            "            System.out.println(nombre + \" se movi√≥ a (\" + x + \", \" + y + \")\");\n" +
            "        } else {\n" +
            "            System.out.println(\"¬°Movimiento inv√°lido! Fuera del mapa.\");\n" +
            "        }\n" +
            "    }\n" +
            "    \n" +
            "    // M√âTODOS DE NEGOCIO (l√≥gica espec√≠fica del juego)\n" +
            "    public void recibirDanio(int danio) {\n" +
            "        if (danio < 0) {\n" +
            "            System.out.println(\"¬°El da√±o no puede ser negativo!\");\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        this.vida = Math.max(0, vida - danio);\n" +
            "        System.out.println(nombre + \" recibi√≥ \" + danio + \" de da√±o. Vida: \" + vida + \"/\" + vidaMaxima);\n" +
            "        \n" +
            "        if (vida == 0) {\n" +
            "            estaVivo = false;\n" +
            "            System.out.println(\"üòµ \" + nombre + \" ha sido eliminado!\");\n" +
            "        }\n" +
            "    }\n" +
            "    \n" +
            "    public void curar(int curacion) {\n" +
            "        if (curacion < 0) {\n" +
            "            System.out.println(\"¬°La curaci√≥n no puede ser negativa!\");\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        int vidaAnterior = vida;\n" +
            "        this.vida = Math.min(vidaMaxima, vida + curacion);\n" +
            "        int curacionReal = vida - vidaAnterior;\n" +
            "        \n" +
            "        System.out.println(\"üíö \" + nombre + \" se cur√≥ \" + curacionReal + \" puntos. Vida: \" + vida + \"/\" + vidaMaxima);\n" +
            "    }\n" +
            "    \n" +
            "    public void ganarPuntos(int puntos) {\n" +
            "        if (puntos < 0) {\n" +
            "            System.out.println(\"¬°Los puntos no pueden ser negativos!\");\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        this.puntuacion += puntos;\n" +
            "        System.out.println(\"üéÜ +\" + puntos + \" puntos! Total: \" + puntuacion);\n" +
            "        \n" +
            "        // Actualizar nivel seg√∫n puntuaci√≥n\n" +
            "        actualizarNivel();\n" +
            "    }\n" +
            "    \n" +
            "    // M√âTODOS PRIVADOS (helper methods)\n" +
            "    private String validarNombre(String nombre) {\n" +
            "        if (nombre == null || nombre.trim().isEmpty()) {\n" +
            "            return \"Jugador An√≥nimo\";\n" +
            "        }\n" +
            "        if (nombre.length() > 15) {\n" +
            "            return nombre.substring(0, 15);\n" +
            "        }\n" +
            "        return nombre.trim();\n" +
            "    }\n" +
            "    \n" +
            "    private void actualizarNivel() {\n" +
            "        String nivelAnterior = nivel;\n" +
            "        \n" +
            "        if (puntuacion >= 1000) {\n" +
            "            nivel = \"Experto\";\n" +
            "        } else if (puntuacion >= 500) {\n" +
            "            nivel = \"Intermedio\";\n" +
            "        } else {\n" +
            "            nivel = \"Principiante\";\n" +
            "        }\n" +
            "        \n" +
            "        if (!nivel.equals(nivelAnterior)) {\n" +
            "            System.out.println(\"üèÜ ¬°\" + nombre + \" subi√≥ a nivel: \" + nivel + \"!\");\n" +
            "        }\n" +
            "    }\n" +
            "    \n" +
            "    public void mostrarEstado() {\n" +
            "        System.out.println(\"\\n=== Estado de \" + nombre + \" ===");\n" +
            "        System.out.println(\"Vida: \" + vida + \"/\" + vidaMaxima);\n" +
            "        System.out.println(\"Puntuaci√≥n: \" + puntuacion);\n" +
            "        System.out.println(\"Nivel: \" + nivel);\n" +
            "        System.out.println(\"Posici√≥n: (\" + posicionX + \", \" + posicionY + \")\");\n" +
            "        System.out.println(\"Estado: \" + (estaVivo ? \"Vivo\üòä\" : \"Muertoüòµ\"));\n" +
            "        System.out.println(\"========================\\n\");\n" +
            "    }\n" +
            "}\n" +
            "\n" +
            "// Clase para probar la encapsulaci√≥n\n" +
            "public class PruebaEncapsulacion {\n" +
            "    public static void main(String[] args) {\n" +
            "        JugadorSeguro jugador = new JugadorSeguro(\"ProGamer\", 100, 100);\n" +
            "        \n" +
            "        // Estas l√≠neas NO funcionar√≠an (est√°n comentadas):\n" +
            "        // jugador.vida = 9999;        // ERROR: vida es private\n" +
            "        // jugador.puntuacion = -100;  // ERROR: puntuacion es private\n" +
            "        \n" +
            "        // Forma correcta de usar la clase:\n" +
            "        jugador.mostrarEstado();\n" +
            "        \n" +
            "        // Movimientos v√°lidos e inv√°lidos\n" +
            "        jugador.setPosicion(200, 150); // V√°lido\n" +
            "        jugador.setPosicion(900, 700); // Inv√°lido (fuera del mapa)\n" +
            "        \n" +
            "        // Gameplay\n" +
            "        jugador.ganarPuntos(300);\n" +
            "        jugador.recibirDanio(40);\n" +
            "        jugador.curar(20);\n" +
            "        jugador.ganarPuntos(300); // Deber√≠a subir a Intermedio\n" +
            "        jugador.ganarPuntos(500); // Deber√≠a subir a Experto\n" +
            "        \n" +
            "        // Intentos de \"hackeo\" que ser√°n bloqueados\n" +
            "        jugador.recibirDanio(-50);  // Da√±o negativo bloqueado\n" +
            "        jugador.ganarPuntos(-200); // Puntos negativos bloqueados\n" +
            "        jugador.curar(-30);        // Curaci√≥n negativa bloqueada\n" +
            "        \n" +
            "        jugador.mostrarEstado();\n" +
            "    }\n" +
            "}",
            "**Principios de Encapsulaci√≥n:**\n\n" +
            "‚Ä¢ **private**: Solo accesible desde la misma clase\n" +
            "‚Ä¢ **public**: Accesible desde cualquier lugar\n" +
            "‚Ä¢ **protected**: Accesible en la misma clase y subclases\n" +
            "‚Ä¢ **default**: Accesible en el mismo paquete\n\n" +
            "**M√©todos Getter:**\n" +
            "- Permiten leer el valor de atributos privados\n" +
            "- Nombrados como getNombre(), getVida(), etc.\n" +
            "- Para boolean: estaVivo() en lugar de getEstaVivo()\n\n" +
            "**M√©todos Setter:**\n" +
            "- Permiten modificar atributos privados CON validaci√≥n\n" +
            "- Nombrados como setNombre(), setPosicion(), etc.\n" +
            "- Incluyen l√≥gica de validaci√≥n para mantener consistencia\n\n" +
            "**Ventajas de Encapsulaci√≥n:**\n" +
            "- Control total sobre c√≥mo se modifican los datos\n" +
            "- Validaci√≥n autom√°tica de valores\n" +
            "- Prevenci√≥n de estados inconsistentes\n" +
            "- Cambios internos sin afectar c√≥digo externo\n" +
            "- Mayor seguridad y robustez del c√≥digo",
            1
        );
        contenidoDAO.insertarContenido(cap7);
        
        // CAP√çTULO 8: Herencia - Reutilizando C√≥digo
        ContenidoTutorial cap8 = new ContenidoTutorial(
            8,
            "Paso 8: Herencia - Creando Familias de Clases",
            "La herencia permite crear nuevas clases basadas en clases existentes. Es como una familia: los hijos heredan caracter√≠sticas de los padres, pero tambi√©n pueden tener sus propias caracter√≠sticas √∫nicas. En nuestro juego, podemos tener diferentes tipos de personajes que comparten caracter√≠sticas b√°sicas.",
            "// CLASE BASE (Padre/Superclase)\n" +
            "public class Personaje {\n" +
            "    // Atributos comunes a todos los personajes\n" +
            "    protected String nombre;\n" +
            "    protected int vida;\n" +
            "    protected int vidaMaxima;\n" +
            "    protected double posicionX;\n" +
            "    protected double posicionY;\n" +
            "    protected boolean estaVivo;\n" +
            "    protected String tipo;\n" +
            "    \n" +
            "    // Constructor de la clase base\n" +
            "    public Personaje(String nombre, int vidaMaxima, double x, double y, String tipo) {\n" +
            "        this.nombre = nombre;\n" +
            "        this.vidaMaxima = vidaMaxima;\n" +
            "        this.vida = vidaMaxima;\n" +
            "        this.posicionX = x;\n" +
            "        this.posicionY = y;\n" +
            "        this.estaVivo = true;\n" +
            "        this.tipo = tipo;\n" +
            "        System.out.println(üéÜ \" + tipo + \" \" + nombre + \" ha aparecido!\");\n" +
            "    }\n" +
            "    \n" +
            "    // M√©todos comunes a todos los personajes\n" +
            "    public void mover(double nuevaX, double nuevaY) {\n" +
            "        this.posicionX = nuevaX;\n" +
            "        this.posicionY = nuevaY;\n" +
            "        System.out.println(nombre + \" se movi√≥ a (\" + nuevaX + \", \" + nuevaY + \")\");\n" +
            "    }\n" +
            "    \n" +
            "    public void recibirDanio(int danio) {\n" +
            "        this.vida = Math.max(0, vida - danio);\n" +
            "        System.out.println(nombre + \" recibi√≥ \" + danio + \" de da√±o. Vida: \" + vida + \"/\" + vidaMaxima);\n" +
            "        \n" +
            "        if (vida <= 0) {\n" +
            "            estaVivo = false;\n" +
            "            System.out.println(\"üòµ \" + nombre + \" (\" + tipo + \") ha sido eliminado!\");\n" +
            "        }\n" +
            "    }\n" +
            "    \n" +
            "    public void mostrarInfo() {\n" +
            "        System.out.println(\"=== \" + nombre + \" (\" + tipo + \") ===");\n" +
            "        System.out.println(\"Vida: \" + vida + \"/\" + vidaMaxima);\n" +
            "        System.out.println(\"Posici√≥n: (\" + posicionX + \", \" + posicionY + \")\");\n" +
            "        System.out.println(\"Estado: \" + (estaVivo ? \"Vivo\" : \"Muerto\"));\n" +
            "    }\n" +
            "    \n" +
            "    // M√©todo que las clases hijas pueden sobrescribir\n" +
            "    public void habilidadEspecial() {\n" +
            "        System.out.println(nombre + \" no tiene habilidad especial.\");\n" +
            "    }\n" +
            "    \n" +
            "    // Getters\n" +
            "    public String getNombre() { return nombre; }\n" +
            "    public int getVida() { return vida; }\n" +
            "    public boolean estaVivo() { return estaVivo; }\n" +
            "}\n" +
            "\n" +
            "// CLASE DERIVADA 1 (Hijo/Subclase)\n" +
            "public class Guerrero extends Personaje {\n" +
            "    private int fuerza;\n" +
            "    private String arma;\n" +
            "    private int experiencia;\n" +
            "    \n" +
            "    // Constructor del Guerrero\n" +
            "    public Guerrero(String nombre, double x, double y) {\n" +
            "        // Llamar al constructor de la clase padre\n" +
            "        super(nombre, 120, x, y, \"Guerrero\"); // M√°s vida que personaje b√°sico\n" +
            "        this.fuerza = 85;\n" +
            "        this.arma = \"Espada\";\n" +
            "        this.experiencia = 0;\n" +
            "        System.out.println(\"  üí™ Fuerza: \" + fuerza + \", Arma: \" + arma);\n" +
            "    }\n" +
            "    \n" +
            "    // M√©todo espec√≠fico del Guerrero\n" +
            "    public void atacar(Personaje objetivo) {\n" +
            "        if (!this.estaVivo) {\n" +
            "            System.out.println(nombre + \" no puede atacar (est√° muerto)\");\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        int danio = fuerza / 3; // Da√±o basado en fuerza\n" +
            "        System.out.println(\"‚öîÔ∏è \" + nombre + \" ataca a \" + objetivo.getNombre() + \" con \" + arma + \"!\");\n" +
            "        objetivo.recibirDanio(danio);\n" +
            "        \n" +
            "        experiencia += 10;\n" +
            "        if (experiencia >= 100) {\n" +
            "            subirNivel();\n" +
            "        }\n" +
            "    }\n" +
            "    \n" +
            "    // Sobrescribir el m√©todo de la clase padre\n" +
            "    @Override\n" +
            "    public void habilidadEspecial() {\n" +
            "        if (!estaVivo) return;\n" +
            "        \n" +
            "        System.out.println(\"üí™ \" + nombre + \" usa GOLPE DEVASTADOR!\");\n" +
            "        fuerza += 20; // Aumenta fuerza temporalmente\n" +
            "        System.out.println(\"  Fuerza aumentada a: \" + fuerza);\n" +
            "    }\n" +
            "    \n" +
            "    private void subirNivel() {\n" +
            "        experiencia = 0;\n" +
            "        fuerza += 10;\n" +
            "        vidaMaxima += 20;\n" +
            "        vida = vidaMaxima; // Curaci√≥n completa\n" +
            "        System.out.println(\"üéÜ ¬°\" + nombre + \" subi√≥ de nivel! Fuerza: \" + fuerza + \", Vida Max: \" + vidaMaxima);\n" +
            "    }\n" +
            "}\n" +
            "\n" +
            "// CLASE DERIVADA 2\n" +
            "public class Mago extends Personaje {\n" +
            "    private int mana;\n" +
            "    private int manaMaximo;\n" +
            "    private int inteligencia;\n" +
            "    private String hechizo;\n" +
            "    \n" +
            "    public Mago(String nombre, double x, double y) {\n" +
            "        super(nombre, 80, x, y, \"Mago\"); // Menos vida pero m√°s poder m√°gico\n" +
            "        this.manaMaximo = 100;\n" +
            "        this.mana = manaMaximo;\n" +
            "        this.inteligencia = 90;\n" +
            "        this.hechizo = \"Bola de Fuego\";\n" +
            "        System.out.println(\"  üßô‚Äç‚ôÇÔ∏è Mana: \" + mana + \", Inteligencia: \" + inteligencia);\n" +
            "    }\n" +
            "    \n" +
            "    public void lanzarHechizo(Personaje objetivo) {\n" +
            "        if (!estaVivo) {\n" +
            "            System.out.println(nombre + \" no puede lanzar hechizos (est√° muerto)\");\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        if (mana < 20) {\n" +
            "            System.out.println(nombre + \" no tiene suficiente mana!\");\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        mana -= 20;\n" +
            "        int danio = inteligencia / 2;\n" +
            "        System.out.println(\"üî• \" + nombre + \" lanza \" + hechizo + \" a \" + objetivo.getNombre() + \"!\");\n" +
            "        objetivo.recibirDanio(danio);\n" +
            "        System.out.println(\"  Mana restante: \" + mana + \"/\" + manaMaximo);\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public void habilidadEspecial() {\n" +
            "        if (!estaVivo) return;\n" +
            "        \n" +
            "        System.out.println(\"üåä \" + nombre + \" usa REGENERACI√ìN M√ÅGICA!\");\n" +
            "        mana = manaMaximo;\n" +
            "        int curacion = inteligencia / 3;\n" +
            "        vida = Math.min(vidaMaxima, vida + curacion);\n" +
            "        System.out.println(\"  Mana restaurado. Vida curada: +\" + curacion);\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public void mostrarInfo() {\n" +
            "        super.mostrarInfo(); // Llamar al m√©todo de la clase padre\n" +
            "        System.out.println(\"Mana: \" + mana + \"/\" + manaMaximo);\n" +
            "        System.out.println(\"Inteligencia: \" + inteligencia);\n" +
            "    }\n" +
            "}\n" +
            "\n" +
            "// CLASE DERIVADA 3\n" +
            "public class Arquero extends Personaje {\n" +
            "    private int precision;\n" +
            "    private int flechas;\n" +
            "    private String tipoArco;\n" +
            "    \n" +
            "    public Arquero(String nombre, double x, double y) {\n" +
            "        super(nombre, 100, x, y, \"Arquero\");\n" +
            "        this.precision = 95;\n" +
            "        this.flechas = 30;\n" +
            "        this.tipoArco = \"Arco √âlfico\";\n" +
            "        System.out.println(\"  üèπ Precisi√≥n: \" + precision + \"%, Flechas: \" + flechas);\n" +
            "    }\n" +
            "    \n" +
            "    public void disparar(Personaje objetivo) {\n" +
            "        if (!estaVivo || flechas <= 0) {\n" +
            "            System.out.println(nombre + \" no puede disparar\");\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        flechas--;\n" +
            "        System.out.println(\"üéØ \" + nombre + \" dispara con \" + tipoArco + \" a \" + objetivo.getNombre() + \"!\");\n" +
            "        \n" +
            "        // Calcular si acierta basado en precisi√≥n\n" +
            "        if (Math.random() * 100 <= precision) {\n" +
            "            int danio = precision / 4;\n" +
            "            System.out.println(\"  üéØ ¬°Impacto certero!\");\n" +
            "            objetivo.recibirDanio(danio);\n" +
            "        } else {\n" +
            "            System.out.println(\"  ‚ùå ¬°Fallo!\");\n" +
            "        }\n" +
            "        \n" +
            "        System.out.println(\"  Flechas restantes: \" + flechas);\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public void habilidadEspecial() {\n" +
            "        if (!estaVivo) return;\n" +
            "        \n" +
            "        System.out.println(\"üî• \" + nombre + \" usa LLUVIA DE FLECHAS!\");\n" +
            "        flechas += 10;\n" +
            "        precision = Math.min(100, precision + 5);\n" +
            "        System.out.println(\"  +10 flechas, precisi√≥n aumentada a \" + precision + \"%\");\n" +
            "    }\n" +
            "}\n" +
            "\n" +
            "// CLASE PARA PROBAR LA HERENCIA\n" +
            "public class BatallaEpica {\n" +
            "    public static void main(String[] args) {\n" +
            "        // Crear personajes de diferentes tipos\n" +
            "        Guerrero arthas = new Guerrero(\"Arthas\", 100, 100);\n" +
            "        Mago jaina = new Mago(\"Jaina\", 200, 150);\n" +
            "        Arquero sylvanas = new Arquero(\"Sylvanas\", 300, 120);\n" +
            "        \n" +
            "        System.out.println(\"\\n===== BATALLA COMIENZA =====");\n" +
            "        \n" +
            "        // Mostrar estado inicial\n" +
            "        arthas.mostrarInfo();\n" +
            "        jaina.mostrarInfo();\n" +
            "        sylvanas.mostrarInfo();\n" +
            "        \n" +
            "        System.out.println(\"\\n===== RONDA 1 =====");\n" +
            "        arthas.atacar(jaina);\n" +
            "        jaina.lanzarHechizo(arthas);\n" +
            "        sylvanas.disparar(arthas);\n" +
            "        \n" +
            "        System.out.println(\"\\n===== HABILIDADES ESPECIALES =====");\n" +
            "        arthas.habilidadEspecial();\n" +
            "        jaina.habilidadEspecial();\n" +
            "        sylvanas.habilidadEspecial();\n" +
            "        \n" +
            "        System.out.println(\"\\n===== RONDA 2 =====");\n" +
            "        arthas.atacar(sylvanas);\n" +
            "        jaina.lanzarHechizo(sylvanas);\n" +
            "        sylvanas.disparar(jaina);\n" +
            "        \n" +
            "        System.out.println(\"\\n===== ESTADO FINAL =====");\n" +
            "        arthas.mostrarInfo();\n" +
            "        jaina.mostrarInfo();\n" +
            "        sylvanas.mostrarInfo();\n" +
            "    }\n" +
            "}",
            "**Conceptos de Herencia:**\n\n" +
            "‚Ä¢ **extends**: Palabra clave para heredar de otra clase\n" +
            "‚Ä¢ **super**: Referencia a la clase padre\n" +
            "‚Ä¢ **protected**: Accesible en la clase y sus subclases\n" +
            "‚Ä¢ **@Override**: Indica que sobrescribimos un m√©todo\n\n" +
            "**Ventajas de la Herencia:**\n" +
            "- Reutilizaci√≥n de c√≥digo (DRY: Don't Repeat Yourself)\n" +
            "- Especializaci√≥n: clases espec√≠ficas con caracter√≠sticas √∫nicas\n" +
            "- Polimorfismo: tratar objetos diferentes de manera similar\n" +
            "- Mantenimiento: cambios en clase padre afectan a todas las hijas\n\n" +
            "**Jerarqu√≠a de Clases:**\n" +
            "```\n" +
            "Personaje (clase padre)\n" +
            "‚îú‚îÄ‚îÄ Guerrero\n" +
            "‚îú‚îÄ‚îÄ Mago\n" +
            "‚îî‚îÄ‚îÄ Arquero\n" +
            "```\n\n" +
            "**super() en Constructor:**\n" +
            "- Debe ser la primera l√≠nea del constructor hijo\n" +
            "- Inicializa la parte \"padre\" del objeto\n\n" +
            "**Sobrescritura de M√©todos:**\n" +
            "- Las clases hijas pueden redefinir m√©todos del padre\n" +
            "- Usar @Override para mayor claridad y detecci√≥n de errores\n" +
            "- Pueden llamar al m√©todo padre con super.nombreMetodo()",
            1
        );
        contenidoDAO.insertarContenido(cap8);
        
        // CAP√çTULO 9: Polimorfismo - Una Interfaz, M√∫ltiples Formas
        ContenidoTutorial cap9 = new ContenidoTutorial(
            9,
            "Paso 9: Polimorfismo - El Poder de las M√∫ltiples Formas",
            "El polimorfismo permite que un mismo c√≥digo funcione con diferentes tipos de objetos. Es como tener un control remoto universal que funciona con diferentes dispositivos. En nuestro juego, podemos tener un array de \"Personajes\" que contenga guerreros, magos y arqueros, y tratarlos de manera uniforme.",
            "// Continuando con las clases del cap√≠tulo anterior...\n" +
            "// (Personaje, Guerrero, Mago, Arquero ya definidas)\n" +
            "\n" +
            "// NUEVA CLASE - Enemigo\n" +
            "public class Enemigo extends Personaje {\n" +
            "    private int recompensa;\n" +
            "    private String comportamiento;\n" +
            "    \n" +
            "    public Enemigo(String nombre, int vida, double x, double y, int recompensa) {\n" +
            "        super(nombre, vida, x, y, \"Enemigo\");\n" +
            "        this.recompensa = recompensa;\n" +
            "        this.comportamiento = \"Agresivo\";\n" +
            "        System.out.println(\"  üëæ Recompensa: \" + recompensa + \" puntos\");\n" +
            "    }\n" +
            "    \n" +
            "    public void atacarJugador(Personaje jugador) {\n" +
            "        if (!estaVivo) return;\n" +
            "        \n" +
            "        int danio = (int)(Math.random() * 25 + 10); // Da√±o aleatorio 10-35\n" +
            "        System.out.println(\"üëæ \" + nombre + \" ataca a \" + jugador.getNombre() + \"!\");\n" +
            "        jugador.recibirDanio(danio);\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public void habilidadEspecial() {\n" +
            "        if (!estaVivo) return;\n" +
            "        \n" +
            "        System.out.println(\"üí• \" + nombre + \" usa RUGIDO INTIMIDANTE!\");\n" +
            "        System.out.println(\"  Todos los personajes cercanos se asustan...\");\n" +
            "    }\n" +
            "    \n" +
            "    public int getRecompensa() {\n" +
            "        return recompensa;\n" +
            "    }\n" +
            "}\n" +
            "\n" +
            "// CLASE QUE DEMUESTRA POLIMORFISMO\n" +
            "public class GestorBatalla {\n" +
            "    \n" +
            "    // POLIMORFISMO EN ACCI√ìN - Un m√©todo que funciona con cualquier Personaje\n" +
            "    public static void curarPersonaje(Personaje personaje, int cantidad) {\n" +
            "        // Este m√©todo funciona con Guerrero, Mago, Arquero, Enemigo, etc.\n" +
            "        if (!personaje.estaVivo()) {\n" +
            "            System.out.println(\"‚ö†Ô∏è No se puede curar a \" + personaje.getNombre() + \" (est√° muerto)\");\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        System.out.println(\"üíö Curando a \" + personaje.getNombre() + \" con \" + cantidad + \" puntos...\");\n" +
            "        // Simulamos curaci√≥n modificando vida (normalmente ser√≠a con setter)\n" +
            "        personaje.recibirDanio(-cantidad); // \"Da√±o\" negativo = curaci√≥n\n" +
            "    }\n" +
            "    \n" +
            "    // M√©todo polim√≥rfico para hacer que cualquier personaje use su habilidad\n" +
            "    public static void activarHabilidadEspecial(Personaje personaje) {\n" +
            "        System.out.println(\"‚ú® Activando habilidad especial de \" + personaje.getNombre() + \"...\");\n" +
            "        personaje.habilidadEspecial(); // Cada clase ejecuta su versi√≥n\n" +
            "    }\n" +
            "    \n" +
            "    // M√©todo para mostrar estad√≠sticas de cualquier personaje\n" +
            "    public static void mostrarEstadisticas(Personaje personaje) {\n" +
            "        personaje.mostrarInfo(); // Cada clase puede tener su versi√≥n\n" +
            "    }\n" +
            "    \n" +
            "    // M√©todo para hacer batalla entre cualquier tipo de personajes\n" +
            "    public static void combate(Personaje atacante, Personaje defensor) {\n" +
            "        if (!atacante.estaVivo() || !defensor.estaVivo()) {\n" +
            "            System.out.println(\"‚ùå No se puede combatir con personajes muertos\");\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        System.out.println(\"‚öîÔ∏è \" + atacante.getNombre() + \" vs \" + defensor.getNombre());\n" +
            "        \n" +
            "        // Polimorfismo: cada tipo de personaje ataca de manera diferente\n" +
            "        if (atacante instanceof Guerrero) {\n" +
            "            ((Guerrero) atacante).atacar(defensor);\n" +
            "        } else if (atacante instanceof Mago) {\n" +
            "            ((Mago) atacante).lanzarHechizo(defensor);\n" +
            "        } else if (atacante instanceof Arquero) {\n" +
            "            ((Arquero) atacante).disparar(defensor);\n" +
            "        } else if (atacante instanceof Enemigo) {\n" +
            "            ((Enemigo) atacante).atacarJugador(defensor);\n" +
            "        }\n" +
            "    }\n" +
            "}\n" +
            "\n" +
            "// DEMOSTRACI√ìN COMPLETA DE POLIMORFISMO\n" +
            "public class DemostracionPolimorfismo {\n" +
            "    public static void main(String[] args) {\n" +
            "        System.out.println(\"===== DEMOSTRACI√ìN DE POLIMORFISMO =====");\n" +
            "        \n" +
            "        // CREAR ARRAY POLIM√ìRFICO - Diferentes tipos tratados igual\n" +
            "        Personaje[] ejercito = {\n" +
            "            new Guerrero(\"Thor\", 100, 100),\n" +
            "            new Mago(\"Gandalf\", 200, 150),\n" +
            "            new Arquero(\"Legolas\", 300, 120),\n" +
            "            new Enemigo(\"Orc Salvaje\", 80, 400, 200, 50),\n" +
            "            new Enemigo(\"Drag√≥n\", 200, 500, 300, 200)\n" +
            "        };\n" +
            "        \n" +
            "        System.out.println(\"\\n===== MOSTRAR TODOS LOS PERSONAJES (POLIM√ìRFICO) =====");\n" +
            "        // Un bucle que funciona para TODOS los tipos de personaje\n" +
            "        for (int i = 0; i < ejercito.length; i++) {\n" +
            "            System.out.println(\"\\n--- Personaje \" + (i+1) + \" ---\");\n" +
            "            GestorBatalla.mostrarEstadisticas(ejercito[i]);\n" +
            "        }\n" +
            "        \n" +
            "        System.out.println(\"\\n===== HABILIDADES ESPECIALES (POLIM√ìRFICO) =====");\n" +
            "        // Cada personaje ejecuta SU PROPIA versi√≥n de habilidadEspecial\n" +
            "        for (Personaje personaje : ejercito) {\n" +
            "            GestorBatalla.activarHabilidadEspecial(personaje);\n" +
            "        }\n" +
            "        \n" +
            "        System.out.println(\"\\n===== SIMULACI√ìN DE BATALLA =====");\n" +
            "        // Combates polim√≥rficos\n" +
            "        GestorBatalla.combate(ejercito[0], ejercito[3]); // Guerrero vs Orc\n" +
            "        GestorBatalla.combate(ejercito[1], ejercito[4]); // Mago vs Drag√≥n\n" +
            "        GestorBatalla.combate(ejercito[2], ejercito[3]); // Arquero vs Orc\n" +
            "        \n" +
            "        System.out.println(\"\\n===== CURACI√ìN MASIVA (POLIM√ìRFICO) =====");\n" +
            "        // Curar a todos los personajes, sin importar su tipo\n" +
            "        for (Personaje personaje : ejercito) {\n" +
            "            GestorBatalla.curarPersonaje(personaje, 30);\n" +
            "        }\n" +
            "        \n" +
            "        System.out.println(\"\\n===== INSTANCEOF Y CASTING =====");\n" +
            "        // Verificar tipos espec√≠ficos y hacer casting\n" +
            "        for (Personaje personaje : ejercito) {\n" +
            "            System.out.println(\"\\n\" + personaje.getNombre() + \":\");\n" +
            "            \n" +
            "            // Verificar tipo espec√≠fico\n" +
            "            if (personaje instanceof Guerrero) {\n" +
            "                System.out.println(\"  Es un Guerrero - Puede usar espada\");\n" +
            "                Guerrero g = (Guerrero) personaje; // Casting\n" +
            "                // Ahora podemos usar m√©todos espec√≠ficos de Guerrero\n" +
            "            } else if (personaje instanceof Mago) {\n" +
            "                System.out.println(\"  Es un Mago - Puede usar magia\");\n" +
            "                Mago m = (Mago) personaje;\n" +
            "                // M√©todos espec√≠ficos de Mago\n" +
            "            } else if (personaje instanceof Arquero) {\n" +
            "                System.out.println(\"  Es un Arquero - Puede usar arco\");\n" +
            "                Arquero a = (Arquero) personaje;\n" +
            "                // M√©todos espec√≠ficos de Arquero\n" +
            "            } else if (personaje instanceof Enemigo) {\n" +
            "                System.out.println(\"  Es un Enemigo - Recompensa al derrotarlo\");\n" +
            "                Enemigo e = (Enemigo) personaje;\n" +
            "                System.out.println(\"    Recompensa: \" + e.getRecompensa() + \" puntos\");\n" +
            "            }\n" +
            "        }\n" +
            "        \n" +
            "        System.out.println(\"\\n===== CONTEO POR TIPOS =====");\n" +
            "        int guerreros = 0, magos = 0, arqueros = 0, enemigos = 0;\n" +
            "        \n" +
            "        for (Personaje p : ejercito) {\n" +
            "            if (p instanceof Guerrero) guerreros++;\n" +
            "            else if (p instanceof Mago) magos++;\n" +
            "            else if (p instanceof Arquero) arqueros++;\n" +
            "            else if (p instanceof Enemigo) enemigos++;\n" +
            "        }\n" +
            "        \n" +
            "        System.out.println(\"Total en ej√©rcito:\");\n" +
            "        System.out.println(\"  Guerreros: \" + guerreros);\n" +
            "        System.out.println(\"  Magos: \" + magos);\n" +
            "        System.out.println(\"  Arqueros: \" + arqueros);\n" +
            "        System.out.println(\"  Enemigos: \" + enemigos);\n" +
            "        \n" +
            "        System.out.println(\"\\n¬°Demostraci√≥n de polimorfismo completada!\");\n" +
            "    }\n" +
            "}",
            "**Polimorfismo - Conceptos Clave:**\n\n" +
            "‚Ä¢ **Una interfaz, m√∫ltiples formas**: Un mismo m√©todo se comporta diferente seg√∫n el objeto\n" +
            "‚Ä¢ **Sobrescritura de m√©todos**: Cada clase hija puede redefinir m√©todos del padre\n" +
            "‚Ä¢ **Arrays polim√≥rficos**: Un array de clase padre puede contener objetos de clases hijas\n" +
            "‚Ä¢ **Binding din√°mico**: Java decide en tiempo de ejecuci√≥n qu√© m√©todo llamar\n\n" +
            "**instanceof y Casting:**\n" +
            "```java\n" +
            "if (personaje instanceof Guerrero) {\n" +
            "    Guerrero g = (Guerrero) personaje; // Casting\n" +
            "    g.atacar(enemigo); // M√©todo espec√≠fico\n" +
            "}\n" +
            "```\n\n" +
            "**Ventajas del Polimorfismo:**\n" +
            "- **C√≥digo m√°s flexible**: Un m√©todo funciona con m√∫ltiples tipos\n" +
            "- **F√°cil extensi√≥n**: Agregar nuevos tipos sin cambiar c√≥digo existente\n" +
            "- **Mantenimiento simplificado**: Cambios localizados en cada clase\n" +
            "- **Dise√±o elegante**: Interfaces limpias y consistentes\n\n" +
            "**Aplicaciones en Juegos:**\n" +
            "- Sistemas de combate universales\n" +
            "- Gesti√≥n de inventarios con diferentes objetos\n" +
            "- IA que funciona con diferentes tipos de enemigos\n" +
            "- Sistemas de part√≠culas y efectos visuales\n\n" +
            "**Regla Importante:**\n" +
            "Siempre verificar con instanceof antes de hacer casting para evitar ClassCastException.",
            1
        );
        contenidoDAO.insertarContenido(cap9);
        
        // CAP√çTULO 10: Interfaces y Clases Abstractas
        ContenidoTutorial cap10 = new ContenidoTutorial(
            10,
            "Paso 10: Interfaces y Clases Abstractas - Contratos de C√≥digo",
            "Las interfaces y clases abstractas nos permiten definir \"contratos\" que las clases deben cumplir. Es como tener un manual de instrucciones que garantiza que ciertos m√©todos estar√°n disponibles. En juegos, esto es √∫til para sistemas como IA, movimiento, o cualquier comportamiento que deba ser consistente.",
            "// INTERFACE - Define un contrato que las clases deben cumplir\n" +
            "public interface Movible {\n" +
            "    // M√©todos abstractos (sin implementaci√≥n)\n" +
            "    void mover(double deltaX, double deltaY);\n" +
            "    void detener();\n" +
            "    double getVelocidad();\n" +
            "    void setVelocidad(double velocidad);\n" +
            "    \n" +
            "    // M√©todo default (Java 8+) - opcional implementar\n" +
            "    default void mostrarPosicion() {\n" +
            "        System.out.println(\"Posici√≥n: Implementaci√≥n por defecto\");\n" +
            "    }\n" +
            "    \n" +
            "    // Constante p√∫blica (impl√≠citamente public static final)\n" +
            "    double VELOCIDAD_MAXIMA = 100.0;\n" +
            "}\n" +
            "\n" +
            "// SEGUNDA INTERFACE\n" +
            "public interface Atacante {\n" +
            "    void atacar(Object objetivo);\n" +
            "    int getDanio();\n" +
            "    boolean puedeAtacar();\n" +
            "    \n" +
            "    // M√©todo est√°tico\n" +
            "    static void mostrarTiposAtaque() {\n" +
            "        System.out.println(\"Tipos: F√≠sico, M√°gico, A Distancia\");\n" +
            "    }\n" +
            "}\n" +
            "\n" +
            "// THIRD INTERFACE\n" +
            "public interface Defendible {\n" +
            "    void defender();\n" +
            "    int getDefensa();\n" +
            "    boolean estaDefendiendo();\n" +
            "}\n" +
            "\n" +
            "// CLASE ABSTRACTA - Mezcla de implementaci√≥n y abstracci√≥n\n" +
            "public abstract class EntidadJuego {\n" +
            "    // Atributos concretos\n" +
            "    protected String nombre;\n" +
            "    protected double x, y;\n" +
            "    protected boolean activo;\n" +
            "    \n" +
            "    // Constructor concreto\n" +
            "    public EntidadJuego(String nombre, double x, double y) {\n" +
            "        this.nombre = nombre;\n" +
            "        this.x = x;\n" +
            "        this.y = y;\n" +
            "        this.activo = true;\n" +
            "        System.out.println(\"Entidad '\" + nombre + \"' creada en (\" + x + \", \" + y + \")\");\n" +
            "    }\n" +
            "    \n" +
            "    // M√©todos concretos\n" +
            "    public void setNombre(String nombre) {\n" +
            "        this.nombre = nombre;\n" +
            "    }\n" +
            "    \n" +
            "    public String getNombre() {\n" +
            "        return nombre;\n" +
            "    }\n" +
            "    \n" +
            "    public void activar() {\n" +
            "        activo = true;\n" +
            "        System.out.println(nombre + \" activado\");\n" +
            "    }\n" +
            "    \n" +
            "    public void desactivar() {\n" +
            "        activo = false;\n" +
            "        System.out.println(nombre + \" desactivado\");\n" +
            "    }\n" +
            "    \n" +
            "    // M√©todo abstracto - DEBE ser implementado por clases hijas\n" +
            "    public abstract void actualizar();\n" +
            "    public abstract void renderizar();\n" +
            "    \n" +
            "    // M√©todo template (patr√≥n de dise√±o)\n" +
            "    public final void cicloDeVida() {\n" +
            "        if (activo) {\n" +
            "            actualizar();\n" +
            "            renderizar();\n" +
            "        }\n" +
            "    }\n" +
            "}\n" +
            "\n" +
            "// CLASE QUE IMPLEMENTA INTERFACES Y EXTIENDE CLASE ABSTRACTA\n" +
            "public class JugadorAvanzado extends EntidadJuego implements Movible, Atacante, Defendible {\n" +
            "    private double velocidad;\n" +
            "    private int danio;\n" +
            "    private int defensa;\n" +
            "    private boolean defendiendo;\n" +
            "    private String tipoAtaque;\n" +
            "    \n" +
            "    public JugadorAvanzado(String nombre, double x, double y) {\n" +
            "        super(nombre, x, y); // Llamar constructor de clase abstracta\n" +
            "        this.velocidad = 50.0;\n" +
            "        this.danio = 25;\n" +
            "        this.defensa = 15;\n" +
            "        this.defendiendo = false;\n" +
            "        this.tipoAtaque = \"F√≠sico\";\n" +
            "    }\n" +
            "    \n" +
            "    // Implementar m√©todos abstractos de EntidadJuego\n" +
            "    @Override\n" +
            "    public void actualizar() {\n" +
            "        System.out.println(nombre + \" actualizando l√≥gica del juego...\");\n" +
            "        // L√≥gica de actualizaci√≥n espec√≠fica del jugador\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public void renderizar() {\n" +
            "        System.out.println(nombre + \" renderizando en pantalla en (\" + x + \", \" + y + \")\");\n" +
            "        // L√≥gica de renderizado espec√≠fica\n" +
            "    }\n" +
            "    \n" +
            "    // Implementar interface Movible\n" +
            "    @Override\n" +
            "    public void mover(double deltaX, double deltaY) {\n" +
            "        if (!activo) {\n" +
            "            System.out.println(nombre + \" no puede moverse (inactivo)\");\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        this.x += deltaX;\n" +
            "        this.y += deltaY;\n" +
            "        System.out.println(üèÉ‚Äç‚ôÇÔ∏è \" + nombre + \" se movi√≥ a (\" + x + \", \" + y + \") a velocidad \" + velocidad);\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public void detener() {\n" +
            "        System.out.println(üõë \" + nombre + \" se detuvo en (\" + x + \", \" + y + \")\");\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public double getVelocidad() {\n" +
            "        return velocidad;\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public void setVelocidad(double velocidad) {\n" +
            "        // Respetar l√≠mite de la interface\n" +
            "        this.velocidad = Math.min(velocidad, VELOCIDAD_MAXIMA);\n" +
            "        System.out.println(\"Velocidad de \" + nombre + \" ajustada a: \" + this.velocidad);\n" +
            "    }\n" +
            "    \n" +
            "    // Implementar interface Atacante\n" +
            "    @Override\n" +
            "    public void atacar(Object objetivo) {\n" +
            "        if (!activo || !puedeAtacar()) {\n" +
            "            System.out.println(nombre + \" no puede atacar ahora\");\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        System.out.println(\"‚öîÔ∏è \" + nombre + \" ataca con \" + tipoAtaque + \" (\" + danio + \" da√±o)\");\n" +
            "        \n" +
            "        if (objetivo instanceof Defendible) {\n" +
            "            Defendible def = (Defendible) objetivo;\n" +
            "            if (def.estaDefendiendo()) {\n" +
            "                System.out.println(\"  ¬°Ataque bloqueado parcialmente!\");\n" +
            "            }\n" +
            "        }\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public int getDanio() {\n" +
            "        return defendiendo ? danio / 2 : danio; // Menos da√±o si est√° defendiendo\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public boolean puedeAtacar() {\n" +
            "        return activo && !defendiendo;\n" +
            "    }\n" +
            "    \n" +
            "    // Implementar interface Defendible\n" +
            "    @Override\n" +
            "    public void defender() {\n" +
            "        if (!activo) {\n" +
            "            System.out.println(nombre + \" no puede defenderse (inactivo)\");\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        defendiendo = true;\n" +
            "        System.out.println(\"üõ°Ô∏è \" + nombre + \" adopta posici√≥n defensiva (Def: \" + defensa + \")\");\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public int getDefensa() {\n" +
            "        return defendiendo ? defensa * 2 : defensa;\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public boolean estaDefendiendo() {\n" +
            "        return defendiendo;\n" +
            "    }\n" +
            "    \n" +
            "    public void dejarDeDefender() {\n" +
            "        defendiendo = false;\n" +
            "        System.out.println(nombre + \" deja de defenderse\");\n" +
            "    }\n" +
            "}\n" +
            "\n" +
            "// ENEMIGO SIMPLE QUE SOLO IMPLEMENTA ATACANTE\n" +
            "public class EnemigoSimple extends EntidadJuego implements Atacante {\n" +
            "    private int danio;\n" +
            "    \n" +
            "    public EnemigoSimple(String nombre, double x, double y, int danio) {\n" +
            "        super(nombre, x, y);\n" +
            "        this.danio = danio;\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public void actualizar() {\n" +
            "        System.out.println(nombre + \" (enemigo) patrullando...\");\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public void renderizar() {\n" +
            "        System.out.println(nombre + \" (enemigo) dibuj√°ndose en pantalla\");\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public void atacar(Object objetivo) {\n" +
            "        if (puedeAtacar()) {\n" +
            "            System.out.println(\"üëæ \" + nombre + \" ataca salvajemente (\" + danio + \" da√±o)\");\n" +
            "        }\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public int getDanio() {\n" +
            "        return danio;\n" +
            "    }\n" +
            "    \n" +
            "    @Override\n" +
            "    public boolean puedeAtacar() {\n" +
            "        return activo;\n" +
            "    }\n" +
            "}\n" +
            "\n" +
            "// DEMOSTRACI√ìN DE INTERFACES Y CLASES ABSTRACTAS\n" +
            "public class DemostracionInterfaces {\n" +
            "    public static void main(String[] args) {\n" +
            "        System.out.println(\"===== DEMOSTRACI√ìN DE INTERFACES Y CLASES ABSTRACTAS =====");\n" +
            "        \n" +
            "        // Crear objetos\n" +
            "        JugadorAvanzado hero = new JugadorAvanzado(\"SuperHero\", 100, 100);\n" +
            "        EnemigoSimple orc = new EnemigoSimple(\"Orc Guerrero\", 200, 150, 30);\n" +
            "        \n" +
            "        System.out.println(\"\\n===== CICLO DE VIDA (TEMPLATE METHOD) =====");\n" +
            "        // El m√©todo cicloDeVida est√° definido en la clase abstracta\n" +
            "        hero.cicloDeVida();\n" +
            "        orc.cicloDeVida();\n" +
            "        \n" +
            "        System.out.println(\"\\n===== COMPORTAMIENTO MOVIBLE =====");\n" +
            "        // Solo el hero implementa Movible\n" +
            "        hero.setVelocidad(75);\n" +
            "        hero.mover(50, 25);\n" +
            "        hero.detener();\n" +
            "        \n" +
            "        System.out.println(\"\\n===== COMPORTAMIENTO DEFENDIBLE =====");\n" +
            "        hero.defender();\n" +
            "        System.out.println(\"Defensa actual: \" + hero.getDefensa());\n" +
            "        \n" +
            "        System.out.println(\"\\n===== COMPORTAMIENTO ATACANTE =====");\n" +
            "        // Ambos implementan Atacante\n" +
            "        hero.atacar(orc);\n" +
            "        orc.atacar(hero);\n" +
            "        \n" +
            "        System.out.println(\"\\n===== POLIMORFISMO CON INTERFACES =====");\n" +
            "        // Arrays polim√≥rficos usando interfaces\n" +
            "        Atacante[] atacantes = {hero, orc};\n" +
            "        \n" +
            "        System.out.println(\"Todos los atacantes:\");\n" +
            "        for (Atacante atacante : atacantes) {\n" +
            "            System.out.println(\"- Da√±o: \" + atacante.getDanio() + \", Puede atacar: \" + atacante.puedeAtacar());\n" +
            "        }\n" +
            "        \n" +
            "        System.out.println(\"\\n===== M√âTODO EST√ÅTICO DE INTERFACE =====");\n" +
            "        Atacante.mostrarTiposAtaque();\n" +
            "        \n" +
            "        System.out.println(\"\\n===== CONSTANTE DE INTERFACE =====");\n" +
            "        System.out.println(\"Velocidad m√°xima permitida: \" + Movible.VELOCIDAD_MAXIMA);\n" +
            "        \n" +
            "        // Intentar sobrepasar el l√≠mite\n" +
            "        hero.setVelocidad(150); // Se limitar√° a 100\n" +
            "        \n" +
            "        System.out.println(\"\\n===== VERIFICACI√ìN DE INTERFACES =====");\n" +
            "        verificarCapacidades(hero);\n" +
            "        verificarCapacidades(orc);\n" +
            "        \n" +
            "        System.out.println(\"\\n¬°Demostraci√≥n completada!\");\n" +
            "    }\n" +
            "    \n" +
            "    // M√©todo utilitario para verificar qu√© interfaces implementa un objeto\n" +
            "    public static void verificarCapacidades(EntidadJuego entidad) {\n" +
            "        System.out.println(\"\\nCapacidades de \" + entidad.getNombre() + \":\");\n" +
            "        \n" +
            "        if (entidad instanceof Movible) {\n" +
            "            System.out.println(\"  ‚úÖ Puede moverse\");\n" +
            "        } else {\n" +
            "            System.out.println(\"  ‚ùå No puede moverse\");\n" +
            "        }\n" +
            "        \n" +
            "        if (entidad instanceof Atacante) {\n" +
            "            System.out.println(\"  ‚úÖ Puede atacar\");\n" +
            "        } else {\n" +
            "            System.out.println(\"  ‚ùå No puede atacar\");\n" +
            "        }\n" +
            "        \n" +
            "        if (entidad instanceof Defendible) {\n" +
            "            System.out.println(\"  ‚úÖ Puede defenderse\");\n" +
            "        } else {\n" +
            "            System.out.println(\"  ‚ùå No puede defenderse\");\n" +
            "        }\n" +
            "    }\n" +
            "}",
            "**Interfaces vs Clases Abstractas:**\n\n" +
            "| **Interfaces** | **Clases Abstractas** |\n" +
            "|-------------|------------------|\n" +
            "| Solo m√©todos abstractos (+ default/static) | M√©todos concretos + abstractos |\n" +
            "| M√∫ltiple herencia | Herencia simple |\n" +
            "| Constantes p√∫blicas impl√≠citas | Cualquier tipo de atributo |\n" +
            "| \"Contrato\" de comportamiento | Implementaci√≥n parcial |\n\n" +
            "**Cu√°ndo usar cada uno:**\n\n" +
            "‚Ä¢ **Interface**: Cuando defines un contrato de comportamiento\n" +
            "  - Movible, Atacante, Defendible\n" +
            "  - Comportamientos que pueden combinar diferentes clases\n\n" +
            "‚Ä¢ **Clase Abstracta**: Cuando tienes c√≥digo com√∫n pero conceptos incompletos\n" +
            "  - EntidadJuego (todos tienen nombre, posici√≥n, estado)\n" +
            "  - Implementaci√≥n parcial que las clases hijas completan\n\n" +
            "**Caracter√≠sticas de Interfaces (Java 8+):**\n" +
            "- **default methods**: Implementaci√≥n por defecto\n" +
            "- **static methods**: M√©todos utilitarios\n" +
            "- **Constantes**: impl√≠citamente public static final\n\n" +
            "**Implementaci√≥n m√∫ltiple:**\n" +
            "```java\n" +
            "class MiClase implements Interface1, Interface2, Interface3\n" +
            "```\n\n" +
            "**Ventajas en el desarrollo de juegos:**\n" +
            "- Sistemas modulares y flexibles\n" +
            "- F√°cil testing con mocks\n" +
            "- Arquitectura limpia y mantenible\n" +
            "- Polimorfismo avanzado",
            1
        );
        contenidoDAO.insertarContenido(cap10);
    }
    
    /**
     * CAP√çTULOS 11-15: ESTRUCTURAS DE DATOS Y COLECCIONES
     * Placeholder - implementaci√≥n futura en FASE 3
     */
    private void insertarCapitulos11a15_EstructurasDatos() {
        // Implementaci√≥n futura en FASE 3
    }
    
    private void insertarCapitulos16a20_InterfacesGraficas() {
        // Implementaci√≥n futura en FASE 4
    }
    
    private void insertarCapitulos21a25_DesarrolloJuego() {
        // Implementaci√≥n futura en FASE 5
    }
    
    private void insertarCapitulos26a30_OptimizacionFinalizacion() {
        // Implementaci√≥n futura en FASE 6
    }
    
    /**
     * Verifica si el contenido ya est√° inicializado
     */
    public boolean tieneContenido() {
        return contenidoDAO.obtenerNumeroCapitulos() > 0;
    }
}